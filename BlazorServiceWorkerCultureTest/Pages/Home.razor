@page "/"
@using BlazorServiceWorkerCultureTest.Services
@using SpawnDev.BlazorJS
@using SpawnDev.BlazorJS.JSObjects
@implements IDisposable

<PageTitle>Service Worker Test</PageTitle>

<h1>Service Worker Test</h1>

<div>
    Update Ready: @(ServiceWorkerUpdateWatchService.InstallWaiting)<br />
    <div>
        @if (ServiceWorkerUpdateWatchService.InstallWaiting)
        {
            <button class="btn btn-primary" @onclick="IncrementCount">@(ServiceWorkerUpdateWatchService.InstallWaiting ? "Update Installed. Restart Now" : "Nothing to do")</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="ServiceWorkerUpdateWatchService.UpdateCheck">Update Check</button>
        }
    </div>
</div>
<div>
    Notification Permission: @(Notification.Permission ?? "unsupported")<br />
    @if (!NotificationPermissionGranted)
    {
        <p>
            Before using 'Chrome DevTools > Application > Service workers > Push' notification permission must be granted.
        </p>
        <button class="btn btn-primary" @onclick="EnableNotifications">Enable Notifications</button>
    }
    else
    {
        <div>
            Test push notification:<br />
            <ul>
                <li>Chrome DevTools > Application > Service workers > Push</li>
                <li>Click the notification button</li>
                <li>A window running your app will go to the weather page and recieve the payload data</li>
                <li>If no window is running (you closed it after initiating the push event) one is opened to the weather page and will recieve the payload data</li>
            </ul>
        </div>
    }
    <div>
        Push Notifications
    </div>
    @if (PushNotificationsEnabled)
    {
        <div>
            <button class="btn btn-primary" @onclick="DisablePush">Disable Push</button>
        </div>
    }
    else
    {
        <div>
            <button class="btn btn-primary" @onclick="EnablePush">Enable Push</button>
        </div>
    }
</div>

@code {
    private int currentCount = 0;

    bool PushNotificationsEnabled = false;

    [Inject]
    ServiceWorkerUpdateWatchService ServiceWorkerUpdateWatchService { get; set; } = default!;

    [Inject]
    BlazorJSRuntime JS { get; set; }

    bool NotificationPermissionGranted => Notification.Permission == "granted";
    bool NotificationPermissionDenied => Notification.Permission == "denied";
    bool NotificationPermissionDefault => Notification.Permission == "default";

    protected override void OnInitialized()
    {
        ServiceWorkerUpdateWatchService.OnServiceWorkerInstalled += OnServiceWorkerInstalled;
    }
    protected override async Task OnInitializedAsync()
    {
        PushNotificationsEnabled = await GetPushSubscription() != null;
    }

    async Task<PushManager?> GetPushManager()
    {
        using var ServiceWorkerContainer = JS.Get<ServiceWorkerContainer>("navigator.serviceWorker");
        using var controller = ServiceWorkerContainer.Controller;
        var swIsActive = controller != null && controller.State == "activated";
        if (!swIsActive)
        {
            return null;
        }
        var serviceWorkerRegistration = await ServiceWorkerContainer.Ready;
        if (serviceWorkerRegistration == null)
        {
            return null;
        }
        return serviceWorkerRegistration.PushManager;
    }

    async Task<PushSubscription?> GetPushSubscription()
    {
        using var pushManager = await GetPushManager();
        if (pushManager == null)
        {
            return null;
        }
        return await pushManager.GetSubscription();
    }

    async Task<bool> EnablePush()
    {
        // Publicly available test keys from here: https://blog.atulr.com/web-notifications/
        // generated using npm package web-push
        // THESE KEYS ARE FOR TESTING ONLY
        // Public Key:
        // BJ5IxJBWdeqFDJTvrZ4wNRu7UY2XigDXjgiUBYEYVXDudxhEs0ReOJRBcBHsPYgZ5dyV8VjyqzbQKS8V7bUAglk
        // Private Key:
        // ERIZmc5T5uWGeRxedxu92k3HnpVwy_RCnQfgek1x2Y4
        return await Subscribe("BJ5IxJBWdeqFDJTvrZ4wNRu7UY2XigDXjgiUBYEYVXDudxhEs0ReOJRBcBHsPYgZ5dyV8VjyqzbQKS8V7bUAglk");
    }
    async Task<bool> Subscribe(string applicationServerKey)
    {
        using var pushManager = await GetPushManager();
        if (pushManager == null)
        {
            return false;
        }
        var subOptions = new PushManagerSubscribeOptions
            {
                ApplicationServerKey = applicationServerKey,
                UserVisibleOnly = true,
            };
        //JS.Log("subscription_options", subOptions);
        //JS.Set("_subscription_options", subOptions);
        using var subscription = await pushManager.Subscribe(subOptions);
        PushNotificationsEnabled = subscription != null;
        return PushNotificationsEnabled;
    }
    async Task DisablePush()
    {
        using var subscription = await GetPushSubscription();
        if (subscription != null)
        {
            await subscription.Unsubscribe();
        }
        PushNotificationsEnabled = false;
    }

    async Task EnableNotifications()
    {
        await Notification.RequestPermission();
    }

    void OnServiceWorkerInstalled()
    {
        StateHasChanged();
    }

    private void IncrementCount()
    {
        ServiceWorkerUpdateWatchService.TellServiceWorkerSkipWaiting();
    }
    public void Dispose()
    {
        ServiceWorkerUpdateWatchService.OnServiceWorkerInstalled -= OnServiceWorkerInstalled;
    }
}
